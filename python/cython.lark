// A Minimum Lark grammar to parse the JSBSim cython files.
//
// Copyright (c) 2025 Bertrand Coconnier
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

%import python (file_input, dots, dotted_name, import_as_names, import_stmt)
%import python (name, assign_stmt, testlist_star_expr, compound_stmt, suite)
%import python (paramvalue, starparams, kwparams, funcdef, test, argvalue)
%import python (arguments, stmt)
%import python (COMMENT, _INDENT, _DEDENT, _NEWLINE)

cimport_from: "from" (dots? dotted_name | dots) "cimport" ("*" | "(" import_as_names ")" | import_as_names)

ctemplate_type: name "[" ctype "]"
pointer_type: (name | ctemplate_type) "*"
ref_type: (name | ctemplate_type) "&"
const_type: "const" (name | ref_type | pointer_type | ctemplate_type)
ctype: name | ref_type | pointer_type | const_type | ctemplate_type

conversion: "<" ctype ">" name
new_param: "new" name "(" [arguments] ")"
cyassign: testlist_star_expr "=" (testlist_star_expr "=")* (new_param | conversion)
?ctypedparam: ctype name
cparameter: (ctypedparam ("=" test)?) | paramvalue
cparameters: cparameter ("," cparameter)* ["," [starparams | kwparams]]
cyfuncdef: name "(" cparameters ")" ":" suite
cyclassdef: "class" name ["(" [arguments] ")"] ":" suite
cdeclare_var: ctypedparam ("=" "&"? argvalue)? _NEWLINE
cdef_stmt: "cdef" (cdeclare_var | cyfuncdef | cyclassdef)

%extend import_stmt: cimport_from
%extend assign_stmt: cyassign
%extend stmt: cdef_stmt
%extend argvalue: new_param
%override funcdef: "def" name "(" [cparameters] ")" ["->" test] ":" suite

%ignore /[\t \f]+/          // WS
%ignore /\\[\t \f]*\r?\n/   // LINE_CONT
%ignore COMMENT
