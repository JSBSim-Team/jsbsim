# Setup script for the fpectl module.
#
# Copyright (c) 2014-2021 Bertrand Coconnier
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
#
# You should have received a copy of the GNU General Public License along with
# this program; if not, see <http://www.gnu.org/licenses/>
#

import os, sys

from setuptools import setup
from setuptools.extension import Extension
from setuptools.command.build_ext import build_ext
from distutils import log
from distutils.ccompiler import new_compiler
from distutils.dist import Distribution


# Performs a build which verbosity is driven by VERBOSE
class QuietBuild(build_ext):
    def run(self):
        if "VERBOSE" not in os.environ:
            name = self.extensions[0].name
            log.info("building '{}' extension".format(name))

            self.oldstdout = os.dup(sys.stdout.fileno())
            self.devnull = open(os.path.join(self.build_lib, name+'-build.log'), 'w')
            os.dup2(self.devnull.fileno(), sys.stdout.fileno())

        build_ext.run(self)

        if "VERBOSE" not in os.environ:
            os.dup2(self.oldstdout, sys.stdout.fileno())
            self.devnull.close()

# Determine which compiler will be used to build the package.
dist = Distribution({'script_name': __file__})

if dist.parse_command_line() and 'build_ext' in dist.commands:
    compiler_name = dist.get_command_obj('build_ext').compiler
else:
    compiler_name = None

compiler = new_compiler(compiler=compiler_name)

if compiler.compiler_type == 'unix':
    cpp_compile_flags = ['-std=c++11']
    cpp_link_flags = []
elif compiler.compiler_type == 'msvc':
    # These flags are equivalent to a RelWithDebInfo configuration.
    # Since the module fpectl is not supposed to be used in production, these
    # values are hardcoded.
    cpp_compile_flags = ['/MD', '/Zi', '/O2', '/Ob1', '/DNDEBUG']
    cpp_link_flags = ['/debug', '/INCREMENTAL']
else:
    cpp_compile_flags = []
    cpp_link_flags = []

setup(
    name="fpectl",
    cmdclass={'build_ext': QuietBuild},
    ext_modules=[Extension('fpectl',
                           sources=['${CMAKE_CURRENT_SOURCE_DIR}/fpectlmodule.cpp'],
                           include_dirs=['${CMAKE_CURRENT_BINARY_DIR}', ${FPECTL_INCLUDE_DIRS}],
                           libraries=[${FPECTL_LIBRARIES}],
                           extra_compile_args=cpp_compile_flags,
                           extra_link_args=cpp_link_flags,
                           language='c++')])
