<?xml version="1.0"?>
<!--<?xml-stylesheet type="text/xsl" href="XMLToDoc.xsl"?>-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:simpleType name="positive-number">
    <xs:restriction base="xs:double">
      <xs:minInclusive value="0"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="ON-OFF">
    <xs:restriction base="xs:token">
      <xs:enumeration value="ON"/>
      <xs:enumeration value="OFF"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="AND-OR">
    <xs:restriction base="xs:token">
      <xs:enumeration value="AND"/>
      <xs:enumeration value="OR"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="angle-unit">
    <xs:restriction base="xs:token">
      <xs:enumeration value="DEG"/>
      <xs:enumeration value="RAD"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="length-unit">
    <xs:restriction base="xs:token">
      <xs:enumeration value="FT"/>
      <xs:enumeration value="IN"/>
      <xs:enumeration value="KM"/>
      <xs:enumeration value="M"/>
      <xs:enumeration value="CM"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="property">
    <xs:annotation><xs:documentation>
      A "property" is a JSBSim simulation parameter that represents any of a
      number of things, from engine throttle settings, to aircraft rotation rates,
      to the simulation time. To see a list of properties that are available for
      an individual aircraft, one can provide the "--catalog" option to the JSBSim
      standalone program.
    </xs:documentation></xs:annotation>
    <xs:simpleContent>
      <xs:extension base="property-name">
        <xs:attribute name="apply" type="property-name"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:simpleType name="property-name">
    <xs:restriction base="xs:token">
      <xs:pattern value="/?([a-zA-Z0-9_-]+(\[[0-9]+\])?/)*[a-zA-Z0-9_-]+(\[[0-9]+\])?"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="signed-property-name">
    <xs:restriction base="xs:token">
      <xs:pattern value="-?/?([a-zA-Z0-9_-]+(\[[0-9]+\])?/)*[a-zA-Z0-9_-]+(\[[0-9]+\])?"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="property-or-value">
    <xs:union memberTypes="xs:double property-name"/>
  </xs:simpleType>

  <xs:complexType name="property-with-value">
    <xs:simpleContent>
      <xs:extension base="property">
        <xs:attribute name="value" type="xs:double" default="0.0"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="orientation">
    <xs:all>
      <xs:element name="pitch" type="xs:double"/>
      <xs:element name="roll" type="xs:double"/>
      <xs:element name="yaw" type="xs:double"/>
    </xs:all>
    <xs:attribute name="unit" type="angle-unit"/>
  </xs:complexType>

  <xs:complexType name="location">
    <xs:annotation><xs:documentation>
      A location is a vector, containing an X, Y, and Z, element. The default unit
      is inches (IN). The unit is specifed in the unit attribute of the location
      - not in the individual x, y, or z child elements.
    </xs:documentation></xs:annotation>
    <xs:all>
      <xs:element name="x" type="xs:double"/>
      <xs:element name="y" type="xs:double"/>
      <xs:element name="z" type="xs:double"/>
    </xs:all>
    <xs:attribute name="unit" type="length-unit"/>
  </xs:complexType>

  <!-- Functions -->
  <xs:complexType name="single-argument">
    <xs:sequence>
      <xs:group ref="func_group"/>
    </xs:sequence>
    <xs:attribute name="name" use="optional" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="two-arguments">
    <xs:sequence>
      <xs:group ref="func_group" minOccurs="2" maxOccurs="2"/>
    </xs:sequence>
    <xs:attribute name="name" use="optional" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="multiple-arguments">
    <xs:sequence>
      <xs:group ref="func_group" minOccurs="2" maxOccurs="unbounded"/>
    </xs:sequence>
    <xs:attribute name="name" use="optional" type="xs:string"/>
  </xs:complexType>

  <xs:simpleType name="numbers-list">
    <xs:list itemType="xs:double"/>
  </xs:simpleType>

  <xs:complexType name="unnamed-table">
    <xs:sequence>
      <xs:element maxOccurs="unbounded" name="independentVar">
        <xs:complexType mixed="true">
          <xs:attribute name="lookup" type="xs:string"/>
        </xs:complexType>
      </xs:element>
      <xs:element name="tableData" maxOccurs="unbounded">
        <xs:complexType>
          <xs:simpleContent>
            <xs:extension base="numbers-list">
              <xs:attribute name="breakPoint" type="xs:double" use="optional"/>
            </xs:extension>
          </xs:simpleContent>
        </xs:complexType>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="table">
    <xs:complexContent>
      <xs:extension base="unnamed-table">
        <xs:attribute name="name" use="optional" type="xs:string"/>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <xs:group name="func_group">
    <xs:choice>
      <xs:element name="table" type="table"/>
      <xs:element name="product" type="multiple-arguments"/>
      <xs:element name="difference" type="two-arguments"/>
      <xs:element name="sum" type="multiple-arguments"/>
      <xs:element name="quotient" type="two-arguments"/>
      <xs:element name="pow" type="two-arguments"/>
      <xs:element name="sqrt" type="single-argument"/>
      <xs:element name="abs" type="single-argument"/>
      <xs:element name="sin" type="single-argument"/>
      <xs:element name="cos" type="single-argument"/>
      <xs:element name="tan" type="single-argument"/>
      <xs:element name="exp" type="single-argument"/>
      <xs:element name="asin" type="single-argument"/>
      <xs:element name="acos" type="single-argument"/>
      <xs:element name="atan" type="single-argument"/>
      <xs:element name="atan2" type="two-arguments"/>
      <xs:element name="min" type="multiple-arguments"/>
      <xs:element name="max" type="multiple-arguments"/>
      <xs:element name="avg" type="multiple-arguments"/>
      <xs:element name="fraction" type="single-argument"/>
      <xs:element name="integer" type="single-argument"/>
      <xs:element name="mod" type="two-arguments"/>
      <xs:element name="random"/>
      <xs:element name="urandom"/>
      <xs:element name="pi"/>
      <xs:element name="toradians" type="single-argument"/>
      <xs:element name="todegrees" type="single-argument"/>
      <xs:element name="lt" type="two-arguments"/>
      <xs:element name="le" type="two-arguments"/>
      <xs:element name="gt" type="two-arguments"/>
      <xs:element name="ge" type="two-arguments"/>
      <xs:element name="eq" type="two-arguments"/>
      <xs:element name="nq" type="two-arguments"/>
      <xs:element name="and" type="multiple-arguments"/>
      <xs:element name="or" type="multiple-arguments"/>
      <xs:element name="not" type="single-argument"/>
      <xs:element name="ifthen">
        <xs:complexType>
          <xs:sequence>
            <xs:group ref="func_group" minOccurs="3" maxOccurs="3"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="switch">
        <xs:complexType>
          <xs:sequence>
            <xs:group ref="func_group" minOccurs="3" maxOccurs="unbounded"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
      <xs:element name="value" type="xs:double"/>
      <xs:element name="property" type="property"/>
      <xs:element name="v" type="xs:double"/>
      <xs:element name="p" type="property"/>
    </xs:choice>
  </xs:group>

  <xs:complexType name="function">
    <xs:sequence>
      <xs:element name="description" minOccurs="0" type="xs:string">
        <xs:annotation><xs:documentation>
          A description of the function.
        </xs:documentation></xs:annotation>
      </xs:element>
      <xs:group ref="func_group"/>
    </xs:sequence>
    <xs:attribute name="name" use="optional"/>
  </xs:complexType>

  <xs:complexType name="model-function">
    <xs:complexContent>
      <xs:extension base="function">
        <xs:attribute name="type" use="optional" default="pre">
          <xs:simpleType>
            <xs:restriction base="xs:string">
              <xs:enumeration value="pre"/>
              <xs:enumeration value="template"/>
              <xs:enumeration value="post"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:complexContent>
  </xs:complexType>

  <!-- FLIGHT CONTROL SECTION -->
  <!-- Channel -->

  <xs:element name="channel">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="description" minOccurs="0" type="xs:string"/>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="accelerometer" type="sensor-with-location"/>
          <xs:element ref="actuator"/>
          <xs:element ref="aerosurface_scale"/>
          <xs:element ref="angle"/>
          <xs:element ref="deadband"/>
          <xs:element ref="fcs_function"/>
          <xs:element ref="gyro"/>
          <xs:element ref="integrator"/>
          <xs:element ref="kinematic"/>
          <xs:element ref="lag_filter"/>
          <xs:element ref="lead_lag_filter"/>
          <xs:element name="magnetometer" type="sensor-with-location"/>
          <xs:element ref="pid"/>
          <xs:element ref="pure_gain"/>
          <xs:element ref="scheduled_gain"/>
          <xs:element ref="second_order_filter"/>
          <xs:element ref="sensor"/>
          <xs:element ref="summer"/>
          <xs:element ref="switch"/>
          <xs:element ref="washout_filter"/>
          <xs:element ref="waypoint_distance"/>
          <xs:element ref="waypoint_heading"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:string">
        <xs:annotation><xs:documentation>
          The name for a channel is simply a brief, descriptive, name. The name
          is not used for anything other than display.
        </xs:documentation></xs:annotation>
      </xs:attribute>
      <xs:attribute name="execute" type="property-name">
        <xs:annotation><xs:documentation>
          The execute attribute value refers to a property that evaluates to a
          boolean indicating whether the channel should execute or not. If this
          attribute is not supplied, the channel always executes.
        </xs:documentation></xs:annotation>
      </xs:attribute>
      <xs:attribute name="execrate" type="xs:integer" default="1"/>
    </xs:complexType>
  </xs:element>

  <!-- Sensors -->
  <xs:simpleType name="axis">
    <xs:restriction base="xs:token">
      <xs:pattern value="[xX]|[yY]|[zZ]"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType name="sensor-with-location">
    <xs:all>
      <xs:element name="location" type="location"/>
      <xs:element name="axis" type="axis"/>
      <xs:element name="orientation" type="orientation" minOccurs="0"/>
      <xs:element ref="quantization" minOccurs="0"/>
      <xs:element name="bias" type="xs:double" minOccurs="0"/>
      <xs:element name="gain" type="xs:double" minOccurs="0"/>
      <xs:element name="drift_rate" type="xs:double" minOccurs="0"/>
      <xs:element name="lag" type="xs:double" minOccurs="0"/>
      <xs:element ref="noise" minOccurs="0"/>
      <xs:element name="delay" type="xs:double" minOccurs="0"/>
      <xs:element name="output" type="property-name"/>
    </xs:all>
    <xs:attribute name="name" use="required" type="xs:string"/>
  </xs:complexType>

  <!-- Gyro -->

  <xs:element name="gyro">
    <xs:complexType>
      <xs:all>
        <xs:element name="axis" type="axis"/>
        <xs:element name="orientation" type="orientation"/>
        <xs:element ref="quantization" minOccurs="0"/>
        <xs:element name="bias" type="xs:double" minOccurs="0"/>
        <xs:element name="gain" type="xs:double" minOccurs="0"/>
        <xs:element name="drift_rate" type="xs:double" minOccurs="0"/>
        <xs:element name="lag" type="xs:double" minOccurs="0"/>
        <xs:element ref="noise" minOccurs="0"/>
        <xs:element name="delay" type="xs:double" minOccurs="0"/>
        <xs:element name="output" type="property-name"/>
      </xs:all>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Angle -->
  <xs:element name="angle">
    <xs:complexType>
      <xs:all>
        <xs:element name="source_angle" type="angle-property"/>
        <xs:element name="target_angle" type="angle-property"/>
      </xs:all>
      <xs:attribute name="name" use="required" type="xs:string"/>
      <xs:attribute name="unit" type="angle-unit"/>
    </xs:complexType>
  </xs:element>

  <!-- Lag filter -->

  <xs:complexType name="delay">
    <xs:simpleContent>
      <xs:extension base="property-or-value">
        <xs:attribute name="type" default="time" use="optional">
          <xs:simpleType>
            <xs:restriction base="xs:token">
              <xs:enumeration value="time"/>
              <xs:enumeration value="frames"/>
            </xs:restriction>
          </xs:simpleType>
        </xs:attribute>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:element name="lag_filter">
    <xs:complexType>
      <xs:all>
        <xs:element name="description" minOccurs="0" type="xs:string"/>
        <xs:element name="input" type="signed-property-name"/>
        <xs:element name="c1" type="xs:double"/>
        <xs:element name="delay" minOccurs="0" type="delay"/>
        <xs:element ref="clipto" minOccurs="0"/>
        <xs:element name="output" type="property-name" minOccurs="0"/>
      </xs:all>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Summer -->

  <xs:element name="summer">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="description" minOccurs="0" type="xs:string"/>
        <xs:element name="input" type="signed-property-name" maxOccurs="unbounded"/>
        <xs:element name="bias" type="xs:double" minOccurs="0"/>
        <xs:element name="delay" minOccurs="0" type="delay"/>
        <xs:element ref="clipto" minOccurs="0"/>
        <xs:element name="output" minOccurs="0" type="property-name" maxOccurs="unbounded"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Aerosurface scale -->

  <xs:element name="aerosurface_scale">
    <xs:annotation><xs:documentation>
      The aerosurface scale component maps an input value (which must fall within
      the span specified in the domain element) to an output value that falls
      within the span specified in the range element. For example, if the actual
      input value is 30% of the distance from the minimum to the maximum domain
      value, the output would be the value corresponding to 30% of the span of
      the range, from the minimum range value.
    </xs:documentation></xs:annotation>
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element name="description" minOccurs="0" type="xs:string"/>
        <xs:element name="input" type="signed-property-name"/>
        <xs:element name="domain" minOccurs="0" type="range"/>
        <xs:element name="range" type="range"/>
        <xs:element name="gain" minOccurs="0">
          <xs:annotation><xs:documentation>
            The Gain element may contain a fixed numeric value, or it may be a
            property name.
          </xs:documentation></xs:annotation>
        </xs:element>
        <xs:element name="delay" minOccurs="0" type="delay"/>
        <xs:element ref="clipto" minOccurs="0"/>
        <xs:element name="output" minOccurs="0" maxOccurs="unbounded" type="property-name"/>
      </xs:choice>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Kinematic device -->

  <xs:element name="kinematic">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="description" minOccurs="0" type="xs:string"/>
        <xs:element name="input" type="signed-property-name"/>
        <xs:element ref="traverse"/>
        <xs:element name="delay" minOccurs="0" type="delay"/>
        <xs:element ref="clipto" minOccurs="0"/>
        <xs:element name="output" minOccurs="0" maxOccurs="unbounded" type="property-name"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="traverse">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="setting" maxOccurs="unbounded"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>
  <xs:element name="setting">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="position" type="xs:double"/>
        <xs:element name="time" type="positive-number"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <!-- Lead lag filter -->

  <xs:element name="lead_lag_filter">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="description" minOccurs="0" type="xs:string"/>
        <xs:element name="input" type="signed-property-name"/>
        <xs:element name="c1" type="xs:double"/>
        <xs:element name="c2" type="xs:double" minOccurs="0"/>
        <xs:element name="c3" type="xs:double" minOccurs="0"/>
        <xs:element name="c4" type="xs:double" minOccurs="0"/>
        <xs:element name="delay" minOccurs="0" type="delay"/>
        <xs:element ref="clipto" minOccurs="0"/>
        <xs:element name="output" minOccurs="0" maxOccurs="unbounded" type="property-name"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Washout filter -->

  <xs:element name="washout_filter">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="description" minOccurs="0" type="xs:string"/>
        <xs:element name="input" type="signed-property-name"/>
        <xs:element name="c1" type="xs:double"/>
        <xs:element name="delay" minOccurs="0" type="delay"/>
        <xs:element ref="clipto" minOccurs="0"/>
        <xs:element name="output" minOccurs="0" maxOccurs="unbounded" type="property-name"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Integrator -->

  <xs:element name="integrator">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="description" minOccurs="0" type="xs:string"/>
        <xs:element name="input" type="signed-property-name"/>
        <xs:element name="c1" type="property-or-value"/>
        <xs:element name="trigger" type="signed-property-name" minOccurs="0"/>
        <xs:element name="delay" minOccurs="0" type="delay"/>
        <xs:element ref="clipto" minOccurs="0"/>
        <xs:element name="output" minOccurs="0" maxOccurs="unbounded" type="property-name"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- PID controller -->

  <xs:element name="pid">
    <xs:complexType>
      <xs:all>
        <xs:element name="description" minOccurs="0" type="xs:string"/>
        <xs:element name="input" type="signed-property-name"/>
        <xs:element name="kp" type="property-or-value" minOccurs="0">
          <xs:annotation><xs:documentation>
            Specifies the proportional constant value or property.
          </xs:documentation></xs:annotation>
        </xs:element>
        <xs:element name="ki" minOccurs="0">
          <xs:annotation><xs:documentation>
            The integrator control action gain.
          </xs:documentation></xs:annotation>
          <xs:complexType>
            <xs:simpleContent>
              <xs:extension base="property-or-value">
                <xs:attribute name="type" default="ab2">
                  <xs:simpleType>
                    <xs:restriction base="xs:string">
                      <xs:enumeration value="rect"><xs:annotation><xs:documentation>Specifies a rectangular integrator.</xs:documentation></xs:annotation></xs:enumeration>
                      <xs:enumeration value="trap"><xs:annotation><xs:documentation>Specifies a trapezoidal integrator.</xs:documentation></xs:annotation></xs:enumeration>
                      <xs:enumeration value="ab2"><xs:annotation><xs:documentation>Specifies an Adams-Bashforth second order integrator. [default]</xs:documentation></xs:annotation></xs:enumeration>
                      <xs:enumeration value="ab3"><xs:annotation><xs:documentation>Specifies an Adams-Bashforth third order integrator.</xs:documentation></xs:annotation></xs:enumeration>
                    </xs:restriction>
                  </xs:simpleType>
                </xs:attribute>
              </xs:extension>
            </xs:simpleContent>
          </xs:complexType>
        </xs:element>
        <xs:element name="kd" type="property-or-value" minOccurs="0">
          <xs:annotation><xs:documentation>
            The derivative control action gain.
          </xs:documentation></xs:annotation>
        </xs:element>
        <xs:element name="trigger" type="signed-property-name" minOccurs="0">
          <xs:annotation><xs:documentation>
            The trigger element provides a way to specify a property that controls
            how the integrator works, and is designed for wind-up protection. If
            the value of the property supplied to the trigger element is 0, there
            is no effect. If the value of the trigger property is non-zero,
            (positive or negative) then the integrator does not integrate and
            holds the last value. If the trigger property value is negative, the
            integrator value is reset to 0.0.
          </xs:documentation></xs:annotation>
        </xs:element>
        <xs:element name="pvdot" type="signed-property-name" minOccurs="0">
          <xs:annotation>
            <xs:documentation>
              pvdot is the process variable time derivative. If not specified,
              the derivative control action will be determined from the change
              in the input from the last time step (divided by the time step
              size). If pvdot is specified, the specified value will be used
              instead. The difference may be minimal in practice - UNLESS there
              is an unnatural step change in the input value. For instance, if
              the control input (process variable) is alpha, an alphadot value
              is calculated as mentioned from the previous value. If pvdot is
              explicitly specified as alphadot (alphadot is calculated and is
              available as a native property in JSBSim) the results can be
              smoother - particularly if there is a step change in the error
              signal (the input) due to a step change in the target state. To
              be clear, pvdot is meant to be the time derivative of the
              input parameter. If the input to the PID controller is pitch rate
              then pvdot should be pitch acceleration. If altitude is the input
              then pvdot should be altitude rate.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="delay" minOccurs="0" type="delay"/>
        <xs:element ref="clipto" minOccurs="0"/>
        <xs:element name="output" minOccurs="0" type="property-name"/>
      </xs:all>
      <xs:attribute name="name" type="xs:string" use="required"/>
      <xs:attribute name="type" use="optional">
        <xs:simpleType>
          <xs:restriction base="xs:string">
            <xs:enumeration value="standard">
              <xs:annotation>
                <xs:documentation>
                  Specifies a standard PID controller where the output is defined
                  as:  Output = Kp * (Input + Integrator_value + Kd*Dval), where
                  Dval is the time derivative of the input signel.
                </xs:documentation>
              </xs:annotation>
            </xs:enumeration>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <!-- Second order filter -->

  <xs:element name="second_order_filter">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="description" minOccurs="0" type="xs:string"/>
        <xs:element name="input" type="signed-property-name"/>
        <xs:element name="c1" type="xs:double"/>
        <xs:element name="c2" type="xs:double"/>
        <xs:element name="c3" type="xs:double"/>
        <xs:element name="c4" type="xs:double"/>
        <xs:element name="c5" type="xs:double"/>
        <xs:element name="c6" type="xs:double"/>
        <xs:element name="delay" minOccurs="0" type="delay"/>
        <xs:element ref="clipto" minOccurs="0"/>
        <xs:element name="output" minOccurs="0" maxOccurs="unbounded" type="property-name"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Pure gain -->

  <xs:element name="pure_gain">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="description" minOccurs="0" type="xs:string"/>
        <xs:element name="input" type="signed-property-name"/>
        <xs:element name="gain" type="property-or-value">
          <xs:annotation><xs:documentation>
            The Gain element may contain a fixed numeric value, or it may be a
            property name.
          </xs:documentation></xs:annotation>
        </xs:element>
        <xs:element name="delay" minOccurs="0" type="delay"/>
        <xs:element ref="clipto" minOccurs="0"/>
        <xs:element name="output" minOccurs="0" maxOccurs="unbounded" type="property-name"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Scheduled gain -->

  <xs:element name="scheduled_gain">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="description" minOccurs="0" type="xs:string"/>
        <xs:element name="input" type="signed-property-name"/>
        <xs:element name="table" type="table"/>
        <xs:element name="gain" type="property-or-value" minOccurs="0">
          <xs:annotation><xs:documentation>
            The Gain element may contain a fixed numeric value, or it may be a
            property name.
          </xs:documentation></xs:annotation>
        </xs:element>
        <xs:element name="delay" minOccurs="0" type="delay"/>
        <xs:element ref="clipto" minOccurs="0"/>
        <xs:element name="output" minOccurs="0" maxOccurs="unbounded" type="property-name"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Switch -->

  <xs:element name="switch">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="description" minOccurs="0" type="xs:string"/>
        <xs:element name="input" type="signed-property-name" minOccurs="0"/>
        <xs:element name="default" minOccurs="0">
          <xs:complexType>
            <xs:attribute name="value" type="property-or-value"/>
          </xs:complexType>
        </xs:element>
        <xs:element name="test" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
            <xs:simpleContent>
              <xs:extension base="xs:string">
                <xs:attribute name="logic" default="AND" use="optional" type="AND-OR"/>
                <xs:attribute name="value" use="required" type="xs:string"/>
              </xs:extension>
            </xs:simpleContent>
          </xs:complexType>
        </xs:element>
        <xs:element name="delay" minOccurs="0" type="delay"/>
        <xs:element ref="clipto" minOccurs="0"/>
        <xs:element name="output" minOccurs="0" maxOccurs="unbounded" type="property-name"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Sensor -->

  <xs:element name="sensor">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded">
        <xs:element name="description" type="xs:string"/>
        <xs:element name="input" type="signed-property-name"/>
        <xs:element ref="quantization"/>
        <xs:element name="bias" type="xs:double"/>
        <xs:element name="gain" type="xs:double"/>
        <xs:element name="drift_rate" type="xs:double"/>
        <xs:element name="lag" type="xs:double"/>
        <xs:element ref="noise"/>
        <xs:element name="delay" type="delay"/>
        <xs:element ref="clipto"/>
        <xs:element name="output" type="property-name"/>
      </xs:choice>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Actuator -->

  <xs:element name="actuator">
    <xs:annotation><xs:documentation>
        An actuator component models a general purpose mechanical effector. The
        actuator can exhibit a lag, can be rate- and position-limited, can
        feature a bias, can have a deadband, and it can feature hysteresis.
    </xs:documentation></xs:annotation>
    <xs:complexType>
      <xs:all>
        <xs:element name="description" minOccurs="0" type="xs:string"/>
        <xs:element name="input" type="signed-property-name"/>
        <xs:element name="lag" type="xs:double" minOccurs="0"/>
        <xs:element name="rate_limit" minOccurs="0">
          <xs:annotation><xs:documentation>
            The rate limit can be specified as a numeric value or as a property.
            Further, an "incr" or "decr" sense attribute to specify which
            direction the rate limit should apply to.
          </xs:documentation></xs:annotation>
          <xs:complexType>
            <xs:simpleContent>
              <xs:extension base="property-or-value">
                <xs:attribute name="sense">
                  <xs:annotation><xs:documentation>
                    The sense attribute determines which direction the rate
                    limit applies to. If no sense is given, the rate limit
                    applies to both directions equally. If "incr" is specified
                    then the rate limit applies only to the rate of increase.
                    If "decr" is specified, then the rate limit applies only to
                    a decreasing rate. The decreasing rate limit - if given - is
                    assumed to be negative - no negative sign is required.
                  </xs:documentation></xs:annotation>
                  <xs:simpleType>
                    <xs:restriction base="xs:string">
                      <xs:enumeration value="incr"><xs:annotation><xs:documentation>Specify this type when the rate limit applies to an increasing rate.</xs:documentation></xs:annotation></xs:enumeration>
                      <xs:enumeration value="decr"><xs:annotation><xs:documentation>Specify this type when the rate limit applies to a decreasing rate.</xs:documentation></xs:annotation></xs:enumeration>
                    </xs:restriction>
                  </xs:simpleType>
                </xs:attribute>
              </xs:extension>
            </xs:simpleContent>
          </xs:complexType>
        </xs:element>
        <xs:element name="bias" type="xs:double" minOccurs="0"/>
        <xs:element name="deadband_width" type="xs:double" minOccurs="0"/>
        <xs:element name="hysteresis_width" type="xs:double" minOccurs="0"/>
        <xs:element name="delay" type="delay" minOccurs="0"/>
        <xs:element ref="clipto" minOccurs="0"/>
        <xs:element name="output" minOccurs="0" type="property-name"/>
      </xs:all>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- Deadband -->

  <xs:element name="deadband">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="description" minOccurs="0" type="xs:string"/>
        <xs:element name="input" type="signed-property-name"/>
        <xs:element name="width" type="property-or-value">
          <xs:annotation><xs:documentation>
            The width value specifies the width of the deadband - i.e. the total
            span about zero where the input will be mapped to zero output.
          </xs:documentation></xs:annotation>
        </xs:element>
        <xs:element name="delay" type="delay" minOccurs="0"/>
        <xs:element ref="clipto" minOccurs="0"/>
        <xs:element name="output" minOccurs="0" maxOccurs="unbounded" type="property-name"/>
      </xs:sequence>
      <xs:attribute name="name" use="required" type="xs:string"/>
    </xs:complexType>
  </xs:element>

  <!-- FCS function -->
  <xs:element name="fcs_function">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="description" minOccurs="0" type="xs:string"/>
        <xs:element name="input" type="signed-property-name" minOccurs="0"/>
        <xs:element name="function" type="function"/>
        <xs:element name="delay" type="delay" minOccurs="0"/>
        <xs:element ref="clipto" minOccurs="0"/>
        <xs:element name="output" minOccurs="0" maxOccurs="unbounded" type="property-name"/>
      </xs:sequence>
      <xs:attribute name="name" use="optional" type="xs:string"/>
    </xs:complexType>

  </xs:element>

  <xs:element name="waypoint_distance">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="waypoint_input">
          <xs:attribute name="unit" type="length-unit"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="waypoint_heading">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="waypoint_input">
          <xs:attribute name="unit" type="angle-unit"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="waypoint_input">
    <xs:all>
      <xs:element name="target_latitude" type="angle-property"/>
      <xs:element name="target_longitude" type="angle-property"/>
      <xs:element name="source_latitude" type="angle-property"/>
      <xs:element name="source_longitude" type="angle-property"/>
    </xs:all>
    <xs:attribute name="name" use="required" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="angle-property">
    <xs:simpleContent>
      <xs:extension base="property-name">
        <xs:attribute name="unit" type="angle-unit"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:element name="noise">
    <xs:annotation>
      <xs:documentation>
        The noise can be entered as a percentage of the signal, or as an absolute value.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:double">
          <xs:attribute name="variation">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="PERCENT"/>
                <xs:enumeration value="ABSOLUTE"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="distribution">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="UNIFORM"/>
                <xs:enumeration value="GAUSSIAN"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="quantization">
    <xs:complexType>
      <xs:all>
        <xs:element name="bits" type="xs:int"/>
        <xs:element name="min" type="xs:double"/>
        <xs:element name="max" type="xs:double"/>
      </xs:all>
      <xs:attribute type="xs:string" name="name"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="clipto">
    <xs:annotation><xs:documentation>
      This element specifies a minimum and/or a maximum limit that the
      associated component will be allowed to have. The result will be
      clipped to the specified limits.
    </xs:documentation></xs:annotation>
    <xs:complexType>
      <xs:all>
        <xs:element name="min" minOccurs="0" type="property-or-value"/>
        <xs:element name="max" minOccurs="0" type="property-or-value"/>
      </xs:all>
      <xs:attribute name="cyclic" use="optional" type="xs:boolean" default="false"/>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="range">
    <xs:annotation><xs:documentation>
      The range defines the minimum and maximum output value mapped..
    </xs:documentation></xs:annotation>
    <xs:all>
      <xs:element name="min" type="xs:double" default="0"/>
      <xs:element name="max" type="xs:double" default="0"/>
    </xs:all>
  </xs:complexType>

  <xs:complexType name="fcs-model">
    <xs:sequence>
      <xs:element name="description" minOccurs="0"/>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="property" type="property-with-value"/>
        <xs:element ref="channel"/>
        <xs:element name="function" type="model-function"/>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="name" use="optional" type="xs:token"/>
    <xs:attribute name="file" use="optional" type="xs:token"/>
  </xs:complexType>

  <!--Output-->

  <xs:complexType name="property-with-caption">
    <xs:simpleContent>
      <xs:extension base="property">
        <xs:attribute name="caption" type="xs:string"/>
      </xs:extension>
    </xs:simpleContent>
  </xs:complexType>

  <xs:complexType name="output">
    <xs:sequence>
      <xs:element name="rates" type="ON-OFF" minOccurs="0"/>
      <xs:element name="velocities" type="ON-OFF" minOccurs="0"/>
      <xs:element name="position" type="ON-OFF" minOccurs="0"/>
      <xs:element name="atmosphere" type="ON-OFF" minOccurs="0"/>
      <xs:element name="fcs" type="ON-OFF" minOccurs="0"/>
      <xs:element name="ground_reactions" type="ON-OFF" minOccurs="0"/>
      <xs:element name="propulsion" type="ON-OFF" minOccurs="0"/>
      <xs:element name="simulation" type="ON-OFF" minOccurs="0"/>
      <xs:element name="massprops" type="ON-OFF" minOccurs="0"/>
      <xs:element name="forces" type="ON-OFF" minOccurs="0"/>
      <xs:element name="moments" type="ON-OFF" minOccurs="0"/>
      <xs:element name="aerosurfaces" type="ON-OFF" minOccurs="0"/>
      <xs:element name="coefficients" type="ON-OFF" minOccurs="0"/>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="property" type="property-with-caption"/>
        <xs:element name="function" type="model-function"/>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="name" type="xs:token" use="required"/>
    <xs:attribute name="type" use="required">
      <xs:annotation><xs:documentation>
        The format in which the data output will be issued.
      </xs:documentation></xs:annotation>
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="CSV"/>
          <xs:enumeration value="TABULAR"/>
          <xs:enumeration value="SOCKET"/>
          <xs:enumeration value="FLIGHTGEAR"/>
          <xs:enumeration value="TERMINAL"/>
          <xs:enumeration value="NONE"/>
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="rate" type="positive-number" use="required"/>
    <xs:attribute name="file" type="xs:token" use="optional"/>
  </xs:complexType>
</xs:schema>
