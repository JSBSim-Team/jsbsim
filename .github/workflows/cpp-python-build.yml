name: C/C++ build

on: [push, pull_request]

jobs:
  Linux:
    strategy:
      matrix:
        os: [ubuntu-18.04, ubuntu-20.04]
        expat: [ON, OFF]
        shared_libs: [ON, OFF]
        exclude:
          - os: ubuntu-18.04
            expat: ON
          - os: ubuntu-18.04
            expat: OFF
            shared_libs: ON
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Ubuntu packages
        run: |
          sudo apt-get update
          sudo apt-get install cxxtest valgrind
      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: '3.6'
      - name: Install Python packages
        run: pip install -U cython numpy pandas scipy wheel valgrindci
      - name: Checkout JSBSim
        uses: actions/checkout@v2
      - name: Install & Configure Doxygen
        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && matrix.expat == 'OFF' && matrix.shared_libs == 'OFF'
        run: |
          sudo apt-get install doxygen
          # We don't want Doxygen to generate the HTML docs in this job (saves time)
          # Set GENERATE_HTML and HAVE_DOT to NO
          perl -i -pe 's/^(GENERATE_HTML\s*=\s*)YES/\1NO/g' doc/JSBSim.dox.in
          perl -i -pe 's/^(HAVE_DOT\s*=\s*)YES/\1NO/g' doc/JSBSim.dox.in
      - name: Configure JSBSim
        run: |
          mkdir build
          cd build
          cmake -DCPACK_GENERATOR=DEB -DINSTALL_PYTHON_MODULE=ON -DCMAKE_C_FLAGS_DEBUG="-g -O2" -DCMAKE_CXX_FLAGS_DEBUG="-g -O2" -DCMAKE_BUILD_TYPE=Debug -DSYSTEM_EXPAT=${{matrix.expat}} -DBUILD_SHARED_LIBS=${{matrix.shared_libs}} ..
      - name: Build JSBSim
        working-directory: build
        run: make -j2
      - name: Test with Valgrind
        run: |
          valgrind --tool=memcheck --leak-check=full --leak-resolution=high --track-origins=yes --xml=yes --xml-file=valgrind_Short_S23_3.xml build/src/JSBSim scripts/Short_S23_3.xml --end-time=5.
          valgrind-ci valgrind_Short_S23_3.xml --abort-on-errors
      - name: Test JSBSim
        working-directory: build
        run: LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PWD/src ctest -j2 --output-on-failure
      - name: Build Ubuntu packages
        if: matrix.shared_libs == 'OFF'
        working-directory: build
        run: cpack
      - name: Build ManyLinux wheel packages (PEP 513)
        if: matrix.os == 'ubuntu-20.04' && matrix.expat == 'OFF' && matrix.shared_libs == 'OFF'
        working-directory: build
        run: |
          rm -f CMakeCache.txt
          rm -f python/dist/*.whl
          make clean
          # Install the Docker build environment
          docker pull quay.io/pypa/manylinux2010_x86_64
          cp ../python/build-wheels.sh .
          chmod +x build-wheels.sh
          # Build the manylinux1 wheel binary packages
          docker run --rm -e GITHUB_RUN_NUMBER=$GITHUB_RUN_NUMBER -e GITHUB_SHA=$GITHUB_SHA -v $PWD/..:/io quay.io/pypa/manylinux2010_x86_64 /io/build/build-wheels.sh
      - name: Test wheel package
        if: matrix.os == 'ubuntu-20.04' && matrix.expat == 'OFF' && matrix.shared_libs == 'OFF'
        run: |
          pip install jsbsim --no-index -f build/python/dist
          python -c "import jsbsim;fdm=jsbsim.FGFDMExec('.', None);print(jsbsim.FGAircraft.__doc__)"
          pip uninstall jsbsim -y

    # Upload files
      - name: On failure - Prepare logs for upload
        if: failure()
        run: |
          mkdir logs
          cp build/Testing/Temporary/*.log logs/.
          cp build/tests/*-build.log logs/.
          cp valgrind_Short_S23_3.xml logs/.
      - name: On failure - Upload logs
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: Linux-${{ matrix.os }}-system_expat_${{ matrix.expat }}-shared_libs_${{ matrix.shared_libs }}.logs
          path: logs
      - name: On failure - Display a summary of valgrind errors.
        if: failure()
        run: valgrind-ci valgrind_Short_S23_3.xml --number-of-errors --summary --source=.

    # Release files
      - name: Release binaries
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'push' && github.ref == 'refs/heads/master' && matrix.expat == 'OFF' && matrix.shared_libs == 'OFF'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ github.job}} rolling release
          tag_name: ${{ github.job }}
          prerelease: true
          body: |
            Contains the ${{ github.job}} packages built from the bleeding edge code
            (branch ${{ github.ref }} commit ${{ github.sha}})
          files: |
            build/*.deb
            build/python/dist/*-manylinux*.whl

  Windows-MinGW32:
    runs-on: windows-latest
    steps:
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'
      - name: Checkout JSBSim
        uses: actions/checkout@v2
      - name: Checkout CxxTest
        uses: actions/checkout@v2
        with:
          repository: CxxTest/cxxtest
          ref: '4.4'
          path: cxxtest
      - name: Configure CxxTest
        working-directory: cxxtest\python
        run: python setup.py install
      - name: Configure JSBSim
        run: |
          # We don't want Doxygen to generate the HTML docs in this job (saves time)
          # Set GENERATE_HTML and HAVE_DOT to NO
          perl -i -pe "s/GENERATE_HTML\s*=\s*YES/GENERATE_HTML = NO/g" doc\JSBSim.dox.in
          perl -i -pe "s/HAVE_DOT\s*=\s*YES/HAVE_DOT = NO/g" doc\JSBSim.dox.in
          mkdir build
          cd build
          cmake -G "MinGW Makefiles" -DCMAKE_INCLUDE_PATH="$(get-location)\..\cxxtest" -DBUILD_PYTHON_MODULE=OFF ..
      - name: Build JSBSim
        working-directory: build
        run: mingw32-make -j2
      - name: Test JSBSim
        working-directory: build
        run: ctest -j2 --output-on-failure

    # Upload files
      - name: On failure - Upload logs
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: Windows_MinGW32.logs
          path: build/Testing/Temporary

  Windows-MSVC:
    runs-on: windows-latest
    steps:
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'
      - name: Install Python packages
        run: pip install -U cython numpy pandas scipy wheel pywin32
      - name: Checkout JSBSim
        uses: actions/checkout@v2
      - name: Install & Configure Doxygen
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          cinst doxygen.install
          # We don't want Doxygen to generate the HTML docs in this job (saves time)
          # Set GENERATE_HTML and HAVE_DOT to NO
          perl -i -pe "s/GENERATE_HTML\s*=\s*YES/GENERATE_HTML = NO/g" doc\JSBSim.dox.in
          perl -i -pe "s/HAVE_DOT\s*=\s*YES/HAVE_DOT = NO/g" doc\JSBSim.dox.in
      - name: Checkout CxxTest
        uses: actions/checkout@v2
        with:
          repository: CxxTest/cxxtest
          ref: '4.4'
          path: cxxtest
      - name: Configure CxxTest
        working-directory: cxxtest\python
        run: python setup.py install
      - name: Configure JSBSim
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_INCLUDE_PATH="$(get-location)\..\cxxtest" ..
      - name: Build JSBSim
        working-directory: build
        run: cmake --build . --config RelWithDebInfo
      - name: Test JSBSim
        working-directory: build
        run: ctest -j2 -E TestInputSocket --build-config RelWithDebInfo --output-on-failure
      - name: Build wheel package for Python 3.8
        working-directory: build
        run: python python/setup.py bdist_wheel --config RelWithDebInfo --build-number=$Env:GITHUB_RUN_NUMBER
      - name: Test wheel package for Python 3.8
        run: |
          pip install jsbsim --no-index -f build/python/dist
          python -c "import jsbsim;fdm=jsbsim.FGFDMExec('.', None);print(jsbsim.FGAircraft.__doc__)"
          pip uninstall jsbsim -y
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
      - name: Build wheel package for Python 3.7
        working-directory: build
        run: |
          pip install -U cython numpy wheel pywin32
          python python/setup.py bdist_wheel --config RelWithDebInfo --build-number=$Env:GITHUB_RUN_NUMBER
      - name: Test wheel package for Python 3.7
        run: |
          pip install jsbsim --no-index -f build/python/dist
          python -c "import jsbsim;fdm=jsbsim.FGFDMExec('.', None);print(jsbsim.FGAircraft.__doc__)"
      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: '3.6'
      - name: Build wheel package for Python 3.6
        working-directory: build
        run: |
          pip install -U cython numpy wheel pywin32
          python python/setup.py bdist_wheel --config RelWithDebInfo --build-number=$Env:GITHUB_RUN_NUMBER
      - name: Test wheel package for Python 3.6
        run: |
          pip install jsbsim --no-index -f build/python/dist
          python -c "import jsbsim;fdm=jsbsim.FGFDMExec('.', None);print(jsbsim.FGAircraft.__doc__)"

    # Upload files
      - name: On failure - Prepare logs for upload
        if: failure()
        run: |
          mkdir logs
          cp build/Testing/Temporary/*.log logs/.
          cp build/tests/*-build.log logs/.
      - name: On failure - Upload logs
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: Windows_MSVC.logs
          path: logs

    # Release files
      - name: Release binaries
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ github.job}} rolling release
          tag_name: ${{ github.job }}
          prerelease: true
          body: |
            Contains the ${{ github.job}} packages built from the bleeding edge code
            (branch ${{ github.ref }} commit ${{ github.sha}})
          files: |
            build\src\RelWithDebInfo\JSBSim.exe
            build\utils\aeromatic++\RelWithDebInfo\aeromatic.exe
            build\python\dist\*.whl

  MacOSX:
    runs-on: macos-latest
    steps:
      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: '3.6'
      - name: Install Python packages
        run: pip install -U cython numpy pandas scipy wheel
      - name: Checkout JSBSim
        uses: actions/checkout@v2
      - name: Install & Configure Doxygen
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: |
          brew install doxygen
          # We don't want Doxygen to generate the HTML docs in this job (saves time)
          # Set GENERATE_HTML and HAVE_DOT to NO
          perl -i -pe 's/^(GENERATE_HTML\s*=\s*)YES/\1NO/g' doc/JSBSim.dox.in
          perl -i -pe 's/^(HAVE_DOT\s*=\s*)YES/\1NO/g' doc/JSBSim.dox.in
      - name: Checkout CxxTest
        uses: actions/checkout@v2
        with:
          repository: CxxTest/cxxtest
          ref: '4.4'
          path: cxxtest
      - name: Configure CxxTest
        working-directory: cxxtest/python
        run: python setup.py install
      - name: Configure JSBSim
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_INCLUDE_PATH=$PWD/../cxxtest ..
      - name: Build JSBSim
        working-directory: build
        run: make -j2
      - name: Test JSBSim
        working-directory: build
        run: ctest -j2 -E TestInputSocket --output-on-failure
      - name: Build wheel package for Python 3.6
        working-directory: build
        run: python python/setup.py bdist_wheel --build-number=$GITHUB_RUN_NUMBER
      - name: Test wheel package for Python 3.6
        run: |
          pip install jsbsim --no-index -f build/python/dist
          python -c "import jsbsim;fdm=jsbsim.FGFDMExec('.', None);print(jsbsim.FGAircraft.__doc__)"
          pip uninstall jsbsim -y
      - name: Set up Python 3.7
        uses: actions/setup-python@v1
        with:
          python-version: '3.7'
      - name: Build wheel package for Python 3.7
        working-directory: build
        run: |
          pip install -U cython numpy wheel
          python python/setup.py bdist_wheel --build-number=$GITHUB_RUN_NUMBER
      - name: Test wheel package for Python 3.7
        run: |
          pip install jsbsim --no-index -f build/python/dist
          python -c "import jsbsim;fdm=jsbsim.FGFDMExec('.', None);print(jsbsim.FGAircraft.__doc__)"
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'
      - name: Build wheel package for Python 3.8
        working-directory: build
        run: |
          pip install -U cython numpy wheel
          python python/setup.py bdist_wheel --build-number=$GITHUB_RUN_NUMBER
      - name: Test wheel package for Python 3.8
        run: |
          pip install jsbsim --no-index -f build/python/dist
          python -c "import jsbsim;fdm=jsbsim.FGFDMExec('.', None);print(jsbsim.FGAircraft.__doc__)"

    # Upload files
      - name: On failure - Prepare logs for upload
        if: failure()
        run: |
          mkdir logs
          cp build/Testing/Temporary/*.log logs/.
          cp build/tests/*-build.log logs/.
      - name: On failure - Upload logs
        uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: MacOSX.logs
          path: logs

    # Release files
      - name: Release binaries
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: ${{ github.job}} rolling release
          tag_name: ${{ github.job }}
          prerelease: true
          body: |
            Contains the ${{ github.job}} packages built from the bleeding edge code
            (branch ${{ github.ref }} commit ${{ github.sha}})
          files: |
            build/python/dist/*.whl

  Documentation:
    needs: Linux
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Install Ubuntu packages
        run: sudo apt-get install doxygen graphviz cxxtest lcov
      - name: Set up Python 3.6
        uses: actions/setup-python@v1
        with:
          python-version: '3.6'
      - name: Install Python packages
        run: pip install -U cython sphinx
      - name: Checkout JSBSim
        uses: actions/checkout@v2
      - name: Configure JSBSim
        run: |
          mkdir build
          cd build
          cmake -DCMAKE_C_FLAGS_DEBUG="--coverage" -DCMAKE_CXX_FLAGS_DEBUG="--coverage" -DCMAKE_BUILD_TYPE=Debug ..
      - name: Build Python docs
        working-directory: build
        run: |
          touch documentation/html/.nojekyll
          sphinx-build -b html documentation documentation/html/python
      - name: Build JSBSim
        working-directory: build
        run: make -j2
      - name: Unit tests coverage
        working-directory: build
        run: |
          ctest -R Test1 --output-on-failure
          lcov -d . -c -o tmp.info
          lcov -r tmp.info /usr/include/c++/\* /usr/include/cxxtest/\* \*/tests/unit_tests/\* -o coverage.info
          genhtml -o documentation/html/coverage -t "JSBSim unit tests" coverage.info
      - name: Publish docs to GitHub Pages
        uses: crazy-max/ghaction-github-pages@v2
        with:
          target_branch: gh-pages
          build_dir: build/documentation/html
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
