name: Build

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Checkout JSBSim
        uses: actions/checkout@v3
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: '3.8'
      - name: Install Python packages
        run: pip install -U cython numpy
      - name: Install Doxygen (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install doxygen
      - name: Install Doxygen (MacOSX)
        if: matrix.os == 'macos-latest'
        run: brew install doxygen
      - name: Configure Doxygen
        run: |
          # We don't want Doxygen to generate the HTML docs in this job (saves time)
          # Set GENERATE_HTML and HAVE_DOT to NO
          perl -i -pe 's/^(GENERATE_HTML\s*=\s*)YES/\1NO/g' doc/JSBSim.dox.in
          perl -i -pe 's/^(HAVE_DOT\s*=\s*)YES/\1NO/g' doc/JSBSim.dox.in
      - name: Configure JSBSim
        run: |
          mkdir build && cd build
          cmake ..
      - name: Build wheels
        uses: pypa/cibuildwheel@v2.8.1
        env:
          CIBW_BEFORE_ALL_LINUX: |
            cd build
            rm -f CMakeCache.txt
            cmake -DCMAKE_C_FLAGS_RELEASE="-g -O2 -DNDEBUG -fno-math-errno" -DCMAKE_CXX_FLAGS_RELEASE="-g -O2 -DNDEBUG -fno-math-errno" -DCMAKE_BUILD_TYPE=Release ..
            cmake --build . --target libJSBSim -- -j2
          CIBW_BEFORE_ALL_MACOS: |
            cd build
            rm -f CMakeCache.txt
            cmake -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64" -DCMAKE_C_FLAGS_RELEASE="-g -O2 -DNDEBUG -fno-math-errno" -DCMAKE_CXX_FLAGS_RELEASE="-g -O2 -DNDEBUG -fno-math-errno" -DCMAKE_BUILD_TYPE=Release ..
            cmake --build . --target libJSBSim -- -j3
          CIBW_SKIP: cp*-musllinux_*
          CIBW_ARCHS_MACOS: universal2
        with:
          package-dir: build/python
        #   output-dir: wheelhouse
        #   config-file: "{package}/pyproject.toml"
      - name: Test wheel package
        run: |
          pip install jsbsim --no-index -f wheelhouse
          python -c "import jsbsim;fdm=jsbsim.FGFDMExec('.', None);print(jsbsim.FGAircraft.__doc__)"
      - name: Test default root package detection
        run: |
          # Test global installation
          python -c "import jsbsim;print(jsbsim.get_default_root_dir())"
          pip uninstall jsbsim -y
          # Test --user installation
          pip install --user jsbsim --no-index -f wheelhouse
          python -c "import jsbsim;print(jsbsim.get_default_root_dir())"
          pip uninstall jsbsim -y
          # Test virtual environment installation
          python -m venv test_venv
          source test_venv/bin/activate
          pip install numpy
          pip install jsbsim --no-index -f wheelhouse
          python -c "import jsbsim;print(jsbsim.get_default_root_dir())"
          pip uninstall jsbsim -y
          deactivate
      - name: Upload Files for Release
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-Wheels.binaries
          path: ./wheelhouse/*.whl
